#include <array>
#include <vulkan/vulkan.h>

// TODO: Provide centralized GLM header?
#define GLM_FORCE_RADIANS
// The perspective projection matric generated by GLM will use the OpenGL
// depth range of (-1.0, 1.0) by default. We need it to use the Vulkan
// range of (0.0, 1.0) instead, which is forced by using this definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include <glm/glm.hpp>
#include <glm/gtc/constants.hpp>
#include <glm/gtc/matrix_transform.hpp>
// The hash functions `std::hash<glm::_types_>` are defined in the gtx/
// folder which means that it's technically still an experimental
// extension to GLM. Therefore, we need to define experimental use.
// It means that the API could change with a new version of GLM in the
// future, but in practice the API is very stable.
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/gtx/hash.hpp>


namespace vtek
{
	// How format of a single vertex is described, as laid out in memory.
	// p = point
	// n = normal
	// t = texcoord
	enum class Vertex
	{
		vec2
	};

	// short-cut
	template<int I>
	using AttrDesc = std::array<VkVertexInputAttributeDescription, I>;


	// ==================== //
	// === Vertex types === //
	// ==================== //
	struct Vertex_p2
	{
		// data
		glm::vec2 pos;

		// descriptions, only static access
		// TODO: Does this work?
		static constexpr Vertex = Vertex::vec2;
		static const VkVertexInputBindingDescription& bindingDescription();
		static const AttrDesc<1>& attributeDescriptions();
	};
}
