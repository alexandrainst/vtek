#pragma once

// TODO: Provide centralized GLM header?
#define GLM_FORCE_RADIANS

// The perspective projection matric generated by GLM will use the OpenGL
// depth range of (-1.0, 1.0) by default. We need it to use the Vulkan
// range of (0.0, 1.0) instead, which is forced by using this definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include <glm/glm.hpp>
#include <glm/gtc/constants.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtx/quaternion.hpp>
#include <glm/gtx/rotate_vector.hpp>

// The hash functions `std::hash<glm::_types_>` are defined in the gtx/
// folder which means that it's technically still an experimental
// extension to GLM. Therefore, we need to define experimental use.
// It means that the API could change with a new version of GLM in the
// future, but in practice the API is very stable.
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/gtx/hash.hpp>
